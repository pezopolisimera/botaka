package dre.elfocrash.roboto.ai;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import dre.elfocrash.roboto.FFFFakePlayer;
import dre.elfocrash.roboto.helpers.FFFFakeHelpers;
import dre.elfocrash.roboto.model.HHHHealingSpell;
import dre.elfocrash.roboto.model.OOOOffensiveSpell;
import dre.elfocrash.roboto.model.SSSSpellUsageCondition;
import dre.elfocrash.roboto.model.SSSSupportSpell;
import dre.elfocrash.roboto.pm.PMReplyHelper;

import net.sf.l2j.commons.random.Rnd;

import net.sf.l2j.gameserver.model.ShotType;
import net.sf.l2j.gameserver.model.actor.Creature;
import net.sf.l2j.gameserver.model.actor.instance.Player;
import net.sf.l2j.gameserver.model.WorldObject;

public class GGGGrandKhavatariAI extends CCCCombatAI {
	    // Timestamp for AI throttling
	    private long _lastActTime = 0;	
	    /**
	     * Called when this bot receives a private message from a player.
	     */
	    public void onPrivateMessage(String fromPlayerName, String messageText) {
	        _ffffakePlayer.onPrivateMessageReceived(fromPlayerName, messageText);
	    }
	
    private long _lastPvPTime = 0;
    private boolean _inAutoDefend = false;

    public GGGGrandKhavatariAI(FFFFakePlayer character) {
        super(character);
    }

    @Override
    public void thinkAndAct() {
    synchronized (_ffffakePlayer) {
     PMReplyHelper.tryReply(_ffffakePlayer);
         }
        // Throttle AI execution to avoid server overload (500–1500ms per bot)
        if (System.currentTimeMillis() - _lastActTime < Rnd.get(500, 1500)) {
            return;
        }
        _lastActTime = System.currentTimeMillis();  
        // Delay before target switching to appear more natural
        try {
            Thread.sleep(Rnd.get(200, 500)); // 200–500ms
        } catch (InterruptedException e) {
            // Optional: handle interruption
        }   
        handleDeath();

        List<Player> alliesUnderAttack = _ffffakePlayer.getKnownType(Player.class).stream()
            .filter(p -> isSameClanOrAlliance(p) && !p.isDead())
            .filter(p -> p.getTarget() instanceof Player)
            .filter(p -> {
                Player attacker = (Player) p.getTarget();
                return attacker != null
                    && !attacker.isDead()
                    && !attacker.isGM()
                    && !isSameClanOrAlliance(attacker)
                    && (attacker.getPvpFlag() > 0 || attacker.getKarma() > 0);
            })
            .collect(Collectors.toList());

        if (!alliesUnderAttack.isEmpty()) {
            Player ally = alliesUnderAttack.get(0);
            Player attacker = (Player) ally.getTarget();
            _ffffakePlayer.setTarget(attacker);
            tryAttackingUsingFighterOffensiveSkill();
            _lastPvPTime = System.currentTimeMillis();
            _inAutoDefend = true;
            return;
        }

        List<Player> attackers = _ffffakePlayer.getKnownType(Player.class).stream()
            .filter(p -> p.getTarget() == _ffffakePlayer && !p.isDead())
            .filter(p -> _ffffakePlayer.isInsideRadius(p, 1000, true, false))
            .filter(p -> (p.getPvpFlag() > 0 || p.getKarma() > 0))
            .filter(p -> !p.isGM())
            .filter(p -> !isSameClanOrAlliance(p))
            .collect(Collectors.toList());

        if (!attackers.isEmpty()) {
            Creature threat = attackers.get(0);
            _ffffakePlayer.setTarget(threat);
            tryAttackingUsingFighterOffensiveSkill();
            _lastPvPTime = System.currentTimeMillis();
            _inAutoDefend = true;
            return;
        }

        if (_inAutoDefend) {
            WorldObject target = _ffffakePlayer.getTarget();

            if (target instanceof Player) {
                Player p = (Player) target;
                if (p.isGM() || isSameClanOrAlliance(p) || (p.getPvpFlag() == 0 && p.getKarma() == 0)) {
                    _ffffakePlayer.setTarget(null);
                    _inAutoDefend = false;
                    return;
                }
            }

            if (target instanceof Creature) {
                Creature c = (Creature) target;
                if (!c.isDead())
                    tryAttackingUsingFighterOffensiveSkill();
            }

               if (System.currentTimeMillis() - _lastPvPTime >= 3000) {
            	        _inAutoDefend = false;
            	        _ffffakePlayer.setTarget(null);
            	    } else {
            	        return;
            	    }
        }

        setBusyThinking(true);
        applyDefaultBuffs();
        handleShots();          
        tryTargetAttackerOrRandomMob(FFFFakeHelpers.getTestTargetClass(), FFFFakeHelpers.getTestTargetRange());

        WorldObject farmTarget = _ffffakePlayer.getTarget();
        if (farmTarget instanceof Creature) {
            Creature mob = (Creature) farmTarget;
            if (!mob.isDead())
            	           // Delay before attacking to mimic human reaction time
            	            try {
            	               Thread.sleep(Rnd.get(150, 400)); // 150–400ms
            	            } catch (InterruptedException e) {
            	                // Optional: handle interruption
            	           }
                tryAttackingUsingFighterOffensiveSkill();
                        } else {
                	            // Pause briefly after target dies to simulate player scanning the area
                	            try {
                	               Thread.sleep(Rnd.get(500, 1000)); // 500–1000ms
                	            } catch (InterruptedException e) {
                	                // Optional: handle interruption
                	            }
        }

        selfSupportBuffs();
        setBusyThinking(false);
    }

    @Override
    protected double changeOfUsingSkill() {
        return 0.2;
    }

    @Override
    protected ShotType getShotType() {
        return ShotType.SOULSHOT;
    }

    @Override
    protected List<OOOOffensiveSpell> getOffensiveSpells() {
        return new ArrayList<>();
    }

    @Override
    protected int[][] getBuffs() {
        return FFFFakeHelpers.getFighterBuffs();
    }   

    @Override
    protected List<HHHHealingSpell> getHealingSpells() {       
        return Collections.emptyList();
    }

    @Override
    protected List<SSSSupportSpell> getSelfSupportSpells() {
        List<SSSSupportSpell> buffs = new ArrayList<>();
        buffs.add(new SSSSupportSpell(139, SSSSpellUsageCondition.LESSHPPERCENT, 30, 1)); // Zealot
        buffs.add(new SSSSupportSpell(176, SSSSpellUsageCondition.LESSHPPERCENT, 30, 2)); // Frenzy
        return buffs;
    }
}
