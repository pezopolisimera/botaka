package dre.elfocrash.roboto;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Logger;

import dre.elfocrash.roboto.helpers.FFFFakeHelpers;
import net.sf.l2j.commons.concurrent.ThreadPool;
import net.sf.l2j.commons.random.Rnd;
import net.sf.l2j.gameserver.data.sql.ClanTable;
import net.sf.l2j.gameserver.model.location.Location;
import net.sf.l2j.gameserver.model.World;
import net.sf.l2j.gameserver.model.actor.instance.Player;
import net.sf.l2j.gameserver.instancemanager.CastleManager;
import net.sf.l2j.gameserver.model.pledge.Clan;
import net.sf.l2j.gameserver.model.pledge.ClanMember;
import net.sf.l2j.gameserver.network.SystemMessageId;
import net.sf.l2j.gameserver.network.serverpackets.PledgeShowMemberListUpdate;
import net.sf.l2j.gameserver.network.serverpackets.SystemMessage;

public enum FFFFakePlayerManager {
    INSTANCE;

    private static final Logger _log = Logger.getLogger(FFFFakePlayerManager.class.getName());

    private static final List<Integer> FAKE_CLAN_IDS = FFFFakeHelpers.loadClanIdList("data/fakebots/clan-list-bot-farm-ffff.txt");
    private static final List<Location> SPAWN_LOCATIONS = FFFFakeHelpers.loadSpawnLocations("data/fakebots/spawn-list-bot-farm-ffff.txt");
    private static final List<Player> ACTIVE_FAKE_PLAYERS = new CopyOnWriteArrayList<>();

    private final List<String> gmSpawnedBotNames = new ArrayList<>();
    private final List<String> autoSpawnedBotNames = new ArrayList<>();

    private static int _fakeClanTableId = 0;
    private static final int MAX_BOTS = 50;
    private static final int BOTS_PER_CYCLE = 5;
    private static final long START_DELAY = 60 * 60 * 1000L; // 1 ώρα

    public List<String> getLatestGMSpawnedBotNames() {
        return gmSpawnedBotNames;
    }

    public List<String> getLatestAutoSpawnedBotNames() {
        return autoSpawnedBotNames;
    }

    public void initialise() {
        FFFFakePlayerNameManager.INSTANCE.initialise();
        FFFFakePlayerTaskManager.INSTANCE.initialise();
        ThreadPool.schedule(() -> startBotSystem(), START_DELAY);
        ThreadPool.scheduleAtFixedRate(() -> {
            INSTANCE.cleanGhosts();
        }, 5 * 60 * 60 * 1000L, 5 * 60 * 60 * 1000L);
    }

    private void startBotSystem() {
        _log.info("Bot system starting after 1-hour delay.");
        spawnInitialBots();
        scheduleBotCycle();
    }

    private void spawnInitialBots() {
        _log.info("Spawning first 5 fake players...");
        spawnFakeBots(5);

        _log.info("Scheduling gradual bot spawn every 5 minutes until MAX_BOTS (" + MAX_BOTS + ")...");
        ThreadPool.scheduleAtFixedRate(() -> {
            if (ACTIVE_FAKE_PLAYERS.size() >= MAX_BOTS) {
                _log.info("Reached MAX_BOTS (" + MAX_BOTS + "), stopping gradual spawn.");
                return;
            }
            int toSpawn = Math.min(5, MAX_BOTS - ACTIVE_FAKE_PLAYERS.size());
            spawnFakeBots(toSpawn);
        }, 5 * 60 * 1000L, 5 * 60 * 1000L);
    }

    private void spawnFakeBots(int count) {
        for (int i = 0; i < count; i++) {
            Location base = Rnd.get(SPAWN_LOCATIONS);
            Location loc = FFFFakeHelpers.getOffsetLocation(base, 250);
            int classId = getRandomClass();
            FFFFakePlayer bot = spawnPlayer(loc.getX(), loc.getY(), loc.getZ(), classId);
            if (!isAllowedClass(classId)) {
                _log.info("Skipped bot with disallowed classId=" + classId);
                bot.deleteMe();
                continue;
            }
            bot.assignDefaultAI();
            ACTIVE_FAKE_PLAYERS.add(bot);
            autoSpawnedBotNames.add(bot.getName());
            _log.info("Spawned bot [" + bot.getName() + "] classId=" + classId + " at " + loc);
        }
    }

    private boolean isAllowedClass(int classId) {
        return List.of(112, 109, 114, 117, 118, 92, 93, 88).contains(classId);
    }

    private int getRandomClass() {
        List<Integer> classIds = Arrays.asList(112, 109, 114, 117, 118, 92, 93, 88);
        return Rnd.get(classIds);
    }

    public void cleanGhosts() {
        int removed = 0;
        Iterator<Player> iter = ACTIVE_FAKE_PLAYERS.iterator();
        while (iter.hasNext()) {
            Player p = iter.next();
            if (!p.isOnline() || p.isTeleporting()) {
                iter.remove();
                gmSpawnedBotNames.remove(p.getName());
                autoSpawnedBotNames.remove(p.getName());
                removed++;
            }
        }
        if (removed > 0)
            _log.info("GhostCleaner: Removed " + removed + " ghost bots.");
    }
}
