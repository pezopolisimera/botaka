package dre.elfocrash.roboto.ai;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import dre.elfocrash.roboto.FFFFakePlayer;
import dre.elfocrash.roboto.ai.addon.IIIIConsumableSpender;
import dre.elfocrash.roboto.helpers.FFFFakeHelpers;
import dre.elfocrash.roboto.model.HHHHealingSpell;
import dre.elfocrash.roboto.model.OOOOffensiveSpell;
import dre.elfocrash.roboto.model.SSSSpellUsageCondition;
import dre.elfocrash.roboto.model.SSSSupportSpell;

import net.sf.l2j.gameserver.model.ShotType;
import net.sf.l2j.gameserver.model.actor.instance.Player;
import net.sf.l2j.gameserver.model.L2Skill;

public class DDDDuelistAI extends CCCCombatAI implements IIIIConsumableSpender {

    public DDDDuelistAI(FFFFakePlayer character) {
        super(character);
    }

    @Override
    public void thinkAndAct() {
        super.thinkAndAct();
        setBusyThinking(true);
        
        applyDefaultBuffs();
        handleShots();
        selfSupportBuffs();

        tryTargetAttackerOrRandomMob(FFFFFakeHelpers.getTestTargetClass(), FFFFakeHelpers.getTestTargetRange());

        // Προσαρμοσμένη χρήση skill με έλεγχο cooldown και ποσοστό χρήσης
        if (Rnd.get() < 0.10) { // 10% πιθανότητα
            boolean usedSkill = tryUseOffensiveSkillSafely();
            if (!usedSkill) {
                doSimpleAttack();
            }
        } else {
            doSimpleAttack();
        }

        setBusyThinking(false);
    }

    // Νέα μέθοδος με έλεγχο cooldown και cast δυνατότητα
    private boolean tryUseOffensiveSkillSafely() {
        List<OOOOffensiveSpell> offensiveSpells = getOffensiveSpells();
        if (offensiveSpells.isEmpty()) return false;

        for (OOOOffensiveSpell offSpell : offensiveSpells) {
            Skill skill = getSkillById(offSpell.getSkillId());
            if (skill == null) continue;

            // Έλεγχος αν μπορεί να cast
            if (canCastSkill(skill)) {
                useSkill(skill);
                return true; // Χρησιμοποιήθηκε skill
            }
        }
        return false; // Δεν χρησιμοποιήθηκε κανένα skill
    }

    private Skill getSkillById(int skillId) {
        Player player = getActiveChar();
        if (player == null) return null;
        return player.getKnownSkill(skillId);
    }

    private boolean canCastSkill(Skill skill) {
        Player player = getActiveChar();
        if (player == null || skill == null) return false;

        // Πχ έλεγχος cooldown και άλλων προϋποθέσεων (μπορείς να προσθέσεις περισσότερους αν χρειάζεται)
        if (player.isSkillDisabled(skill)) return false;
        if (player.getCurrentMp() < skill.getMpConsume()) return false;
        if (player.getCurrentHp() <= skill.getHpConsume()) return false;

        // Επιπλέον εδώ μπορείς να προσθέσεις έλεγχο range κλπ αν χρειάζεται
        return true;
    }

    @Override
    protected ShotType getShotType() {
        return ShotType.SOULSHOT;
    }

    @Override
    protected double changeOfUsingSkill() {
        return 0.10;  // 10% πιθανότητα skill usage
    }

    @Override
    protected List<OOOOffensiveSpell> getOffensiveSpells() {
        List<OOOOffensiveSpell> offensiveSpells = new ArrayList<>();
        offensiveSpells.add(new OOOOffensiveSpell(440, 10)); // Blade Hurricane, level 3, priority 10
        return offensiveSpells;
    }

    @Override
    protected List<SSSSupportSpell> getSelfSupportSpells() {
        List<SSSSupportSpell> selfBuffs = new ArrayList<>();
        selfBuffs.add(new SSSSupportSpell(139, 1)); // Dance of Warrior
        selfBuffs.add(new SSSSupportSpell(297, 2)); // Dance of Concentration
        // Αφαιρέθηκε το skill 440 από self buffs για αποφυγή προβλημάτων
        return selfBuffs;
    }

    @Override
    protected int[][] getBuffs() {
        return FFFFakeHelpers.getFighterBuffs();
    }

    @Override
    protected List<HHHHealingSpell> getHealingSpells() {
        return Collections.emptyList();
    }
}
